Objectif
------------------------------------------------------------
dispatch - Simulates a scheduling algorithm of the family of
Multilevel Feedback Queue Scheduling


Description
------------------------------------------------------------
file <file> describes the processes on which the algorithm
feedback (described below) will operate. Quantums of the F0 and F1 files
are given respectively by <quantum_F0> and <quantum_F1> which must
be strictly positive integers.
<file> is a file (text) of integers separated with blanks where
each line describes a process according to the following interpretation:
a - The first integer of the line represents the process PID. This PID
must be strictly positive because 0 is the IDLE process PID that
occupies the CPU when no other process is ready.
b - The second integer of the line represents the arrival time of the
process . This must be positive or null.
c - The remaining integers in the line represent, if they are
strictly positive, CPU time durations and, if they are strictly
Negative blocking times for I/O. CPU time durations
successive groups are grouped in their sum.
The following regular expression describes the <file>:
<pid> <arrived_time> <cpu> (<cpu> | (<I_O> <cpu>)) *
where all the tokens are integers; and where * means 0, one or more occurrences
of the expression concerned.



Here are some examples of lines respecting the form above
12 0 12 -12 12
9 2 3 4
7 2 1 1 -3 4 -4 1 1
5 2 1 -3 4 -4 1
According to what precedes (that the times added up), the three
following lines are equivalent:
7 5 1 1 -3 6 -4 1 1
7 5 2 -3 4 2 -4 2
7 5 2 -3 6 -4 2
These lines mean that the process of pid 7 happens at the moment 5 and
go to state ready. After a time of 2 units of time, it will be
blocked for 3 units of time before changing to ready. Then, after a
time of 6 units of time, it will be blocked for 4 units of time
before going to ready. Finally, it ends after a time of 2 units
of time.





F = Queue

The feedback algorithm to simulate is the one seen in the course. He uses
three files F0, F1 and F2. We remind you that queues are managed according to
the policy that the first to enter the queue is the first to
get out of the queue. The feedback algorithm is described by all the
following requirements:
1 - The queue F0 has a quantum q0 and the queue F1 a quantum q1
2 - F0 is more important than F1 and F2
3 - Likewise, F1 has a higher priority than F2
4 - F1 processes have access to the CPU only if F0 is empty
5 - The processes of F2 have access to the CPU only if F0 and F1 are empty
6 - As soon as a process is ready, it enters the F0 queue
7 - The process at the head of the F0 queue which completed a quantum q0 in
the CPU, leaves F0 to enter the F1 queue if it still needs the
cpu
8 - A process at the head of F1 that has completed quantum q1 in the CPU,
fate of F1 to enter F2 if he still needs the cpu
9 - The process at the beginning of the queue F2 can take the cpu up to its
next state change
10 - We suppose that we have a priority with preemption: the arrival of a
higher priority process than the one with the CPU causes its preemption
11 - Any preempted process remains at the front of its queue so as not to
lose it's priority
12 - An F1 process that is preempted before the end of its quantum
will have the right to complete his quantum at his next access to the
CPU
13 - A process that goes to the blocked state leaves the CPU (and its queue)
but, afterwards, he joins F0 as soon as he enters the ready state.
14 - A process does not necessarily leave the CPU when it goes from one
file to another
15 - If at the same time two or more processes must enter a
the same file, we favor the one with the smallest PID


Here is an example of a process file that will be used to give an example of execution:
16 10 4 -2 23
2 5 11 10
The dispatch program calculates the process population scheduling specified in the file
received as a parameter according to the algorithm described. The display of the results of the dispatch program must
look like the following example:

Alex> cat example. txt
16 10 4 -2 23
2 5 11 10
Alex> wc -l example. txt
2
example. txt
Alex> # wc shows that the file contains two lines
Alex> ./ dispatch 5 10 example. txt

PID 0 | 0 | 5
--------------------------------------------
PID 2 | 5 | 5
--------------------------------------------
PID 16 | 10 | 4
--------------------------------------------
PID 2 | 14 | 2
--------------------------------------------
PID 16 | 16 | 5
--------------------------------------------
PID 2 | 21 | 8
--------------------------------------------
PID 16 | 29 | 10
--------------------------------------------
PID 2 | 39 | 6
--------------------------------------------
PID 16 | 45 | 8
--------------------------------------------



The process of PID 0 (IDLE) occupies the CPU when no ready processes are available. In addition,
example "PID 16 | 10 | 4 "means the PID process 16 enters the CPU at moment 10 for a
duration of 4 units. The program must display the results using strictly the functions
display provided.
Here is a second example which is very simple:
Alex> cat exampleSimple. txt
2 0 10 20
Alex> ./dispatch 2 10 exampleSimple. txt
PID 2 | 0 | 30
--------------------------------------------
Here are some cases of errors:
Alex> ls exampleXYZ. txt
ls: exampleXYZ. txt: No such file or directory
Alex> ./dispatch 5 10 exampleXYZ. txt
Error: file opening error
Alex> ./dispatch 5 to 10 example. txt
Error: Incorrect settings
Alex> ./dispatch 10 example. txt
Error: Incorrect settings
Alex> cat example2. txt
16 10 4 -2 -23 1
2 5 34 11 10
Alex> ./dispatch 5 10 example2. txt
Error: corrupted file
We can not have two negative numbers in a row! This error traces the cases where the file does not respect
not the specified form of data.
Alex> cat example3. txt
16 10 4 2 -23 6
2 5 34 k 11 10
Alex> ./dispatch 5 10 example3. txt
Error: corrupted file
34k is not an integer.


Need to compile with gcc -Wall -std=c99 dispatch.c utils.c -o dispatch





